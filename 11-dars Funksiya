
# 1) Ihtiyoriy sonning 3-darajasini hisoblovchi PowerA3 nomli funksiya hosil qiling. PowerA3 funksiyasi orqali A, B, C haqiqiy sonlarning va D, E butun
#    sonlarning 3-darajasini hisoblovchi programma tuzilsin.

A = float(input('A = '))
B = float(input('B = '))
C = float(input('C = '))
D = int(input('D = '))
E = int(input('E = '))

def PowerA3(son):
    S = 1
    for i in range(3):
        S *= son
    return S

print(PowerA3(A))
print(PowerA3(B))
print(PowerA3(C))
print(PowerA3(D))
print(PowerA3(E))



# 2) Ixtiyoriy sonning 2, 3, 4 - darajasini hisoblovchi PowerA234 nomli funksiya hosil qiling. PowerA234 funksiyasi orqali A, B, C haqiqiy sonlarining 
#    2, 3, 4 - darajasini hisoblovchi programma tuzilsin. Funksiya prototipi quydagicha bo'lishi mumkin:  void PowerA234(float,float*,float*,float*); 

A = float(input("A = "))
B = float(input("B = "))
C = float(input("C = "))

def PowerA234(son):
    ikki = son ** 2
    uch = son ** 3
    tort = son ** 4
    print(son,"^ 2 =",ikki,"  ",son,"^ 3 =",uch,"   ",son,"^ 4 =",tort)

PowerA234(A)
PowerA234(B)
PowerA234(C)



# 3) 2 ta sonning o'rta arifmetigi va geometrigini hisoblovchi MEAN nomli funksiya hosil qiling. MEAN
#    funksiyasi orqali A, B, C, D sonlaridan (A,B),(A,C),(A,D) juftliklarning o'rta arifmetigi va 
#    geometrigini hisoblovchi programma tuzilsin. 
#    Funksiya prototipi quydagicha bo'lishi mumkin:
#    void MEAN(float, float, float*, float*)

A = float(input('A = '))
B = float(input('B = '))
C = float(input('C = '))
D = float(input('D = '))

def MEAN(son1,son2):
    s = (son1 + son2) / 2
    p = (son1*son2) ** 0.5
    print(f"{son1} va {son2} ning o'rta arifmetigi: {s}")
    print(f"{son1} va {son2} ning o'rta geometrigi: {p}\n")

MEAN(A,B)
MEAN(A,C)
MEAN(A,D)



# 4) 

def Triangle(son):
    s = ((3**0.5) / 4) * (son**2)
    p = 3*son
    print("s =",s,"  p =",p)

Triangle(int(input('a = ')))
Triangle(int(input('b = ')))
Triangle(int(input('c = ')))



# 5) 

def RectPS(x1,y1,x2,y2):
    A = abs(x1-x2)
    B = abs(y1-y2)
    s = A * B
    p = 2 * (A + B)
    print("S =",s,"  P =",p)
    
RectPS(int(input('x1 = ')),int(input('y1 = ')),
       int(input('x2 = ')),int(input('y2 = ')))

RectPS(int(input('x1 = ')),int(input('y1 = ')),
       int(input('x2 = ')),int(input('y2 = ')))



# 6) 

def DigitCountSum(son):
    p = 0;  s = 0
    while son != 0:
        p += 1
        s += son % 10
        son //= 10
    print("Raqamlari soni: ",p)
    print("Raqamlari yig'indisi: ",s)

DigitCountSum(int(input('a = ')))
DigitCountSum(int(input('b = ')))
DigitCountSum(int(input('c = ')))



# 7) 

def InvertDigit(son):
    s = 0
    while son != 0:
        s = s*10 + son%10
        son = son//10
    print(s)

InvertDigit(int(input('a = ')))
InvertDigit(int(input('b = ')))
InvertDigit(int(input('c = ')))



# 8)

def AddRightDigit(K,R):
    K = K*10 + R
    print(K)
    
AddRightDigit(int(input('K = ')),int(input('(1<=R<=9) R = ')))



# 9) 

def AddLeftDigit(k,R):
    s = 0;  P = k
    while k != 0:
        s += 1
        k = k // 10
    R = R*(10**s) + P
    print(R)
    
AddLeftDigit(int(input('K = ')),int(input('(1<=R<=9) R = ')))



# 10)

a = int(input("a = "))
b = int(input("b = "))

def swap(x,y):
    return y,x

a,b = swap(a,b)

print(a,b)



# 11) x va y sonlaridan kichigini x ga kattasini y ga yozuvchi Minmax(x,y) funksiyasini hosil qiling.
#     Minmax funksiyasiga 4 marta chiqish orqali a, b, c, d butun sonlaridan kattasini va kichigini
#     aniqlovchi programma tuzilsin.

a = int(input('a = '))
b = int(input('b = '))
c = int(input('c = '))
d = int(input('d = '))


def minmax(x,y):
    if x < y:
        x,y = y,x
    return x,y

a,b = minmax(a,b)
c,d = minmax(c,d)
a,c = minmax(a,c)
b,d = minmax(b,d)

print("max =",a,"min =",d)



# 12) A, B, C sonlarni o'sish tartibida joylashtiruvchi Sortlnk3(A,B,C) funksiyasini hosil qiling.
#     Ya'ni A, B, C sonlari qiymatlartini shunday almashtiringki, natijada A ning qiymati eng kichik
#     va C ning qiymati eng katta bo'lsin. Bu funksiya orqali (A1,B1,C1) va (A2,B2,C2) sonlarini tartiblang.

A1 = int(input("A1 = "))
B1 = int(input("B1 = "))
C1 = int(input("C1 = "))

A2 = int(input("A2 = "))
B2 = int(input("B2 = "))
C2 = int(input("C2 = "))

def Sortlnk3(A,B,C):
    if A > B:
        A,B = B,A
    if A > C:
        A,C = C,A
    if B > C:
        B,C = C,B
    return A,B,C

A1,B1,C1 = Sortlnk3(A1,B1,C1)
A2,B2,C2 = Sortlnk3(A2,B2,C2)
print("A1 =",A1," B1 =",B1," C1 =",C1)
print("A2 =",A2," B2 =",B2," C2 =",C2)



# 13) A, B, C sonlarni kamayish tartibida joylashtiruvchi SortDek3(A,B,C) funksiyasini hosil qiling.
#     Ya'ni A, B, C sonlari qiymatlartini shunday almashtiringki, natijada A ning qiymati eng katta
#     va C ning qiymati eng kichik bo'lsin. Bu funksiya orqali (A1,B1,C1) va (A2,B2,C2) sonlarini tartiblang.

A1 = int(input("A1 = "))
B1 = int(input("B1 = "))
C1 = int(input("C1 = "))

A2 = int(input("A2 = "))
B2 = int(input("B2 = "))
C2 = int(input("C2 = "))

def Sortlnk3(A,B,C):
    if A < B:
        A,B = B,A
    if A < C:
        A,C = C,A
    if B < C:
        B,C = C,B
    return A,B,C

A1,B1,C1 = Sortlnk3(A1,B1,C1)
A2,B2,C2 = Sortlnk3(A2,B2,C2)
print("A1 =",A1," B1 =",B1," C1 =",C1)
print("A2 =",A2," B2 =",B2," C2 =",C2)



# 14) O'nga siklik siljishni amalga oshiruvchi ShiftRight3(A,B,C) funksiyani hosil qiling. Ya'ni
#     A ning qiymati B ga, B ning qiymati C ga, C ning qiymati A ga o'tib qolsin. Bu funksiya orqali
#     (A1,B1,C1) va (A2,B2,C2) sonlarni siljiting.

A1 = int(input("A1 = "))
B1 = int(input("B1 = "))
C1 = int(input("C1 = "))

A2 = int(input("A2 = "))
B2 = int(input("B2 = "))
C2 = int(input("C2 = "))

def ShiftRight3(A,B,C):
    A,B,C = C,A,B
    return A,B,C

A1,B1,C1 = ShiftRight3(A1,B1,C1)
A2,B2,C2 = ShiftRight3(A2,B2,C2)
print("A1 =",A1," B1 =",B1," C1 =",C1)
print("A2 =",A2," B2 =",B2," C2 =",C2)



# 15) Chapga siklik siljishni amalga oshiruvchi ShiftLeft3(A,B,C) funksiyani hosil qiling. Ya'ni
#     C ning qiymati B ga, B ning qiymati A ga, A ning qiymati C ga o'tib qolsin. Bu funksiya orqali
#     (A1,B1,C1) va (A2,B2,C2) sonlarni siljiting.

A1 = int(input("A1 = "))
B1 = int(input("B1 = "))
C1 = int(input("C1 = "))

A2 = int(input("A2 = "))
B2 = int(input("B2 = "))
C2 = int(input("C2 = "))

def ShiftLeft3(A,B,C):
    A,B,C = B,C,A
    return A,B,C

A1,B1,C1 = ShiftLeft3(A1,B1,C1)
A2,B2,C2 = ShiftLeft3(A2,B2,C2)
print("A1 =",A1," B1 =",B1," C1 =",C1)
print("A2 =",A2," B2 =",B2," C2 =",C2)



# 16) Haqiqiy sonning ishorasini aniqlovchi ishora nomli funksiya hosil qiling. Funksiya argumenti
#     noldan kichik bo'lsa -1; noldan katta bo'lsa 1; nolga teng bo'lsa 0 qiymat qaytarsin. Haqiqiy
#     a va b sonlari uchun ishora(a) + ishora(b) ifodasi hisoblansin.

a = int(input('a = '))
b = int(input('b = '))

def ishora(son):
    if son>0:
        son = 1
    elif son<0:
        son = -1
    else:
        son = 0
    return son

print(ishora(a)+ishora(b))



# 17) Kvadrat tenglamaning ildizlar sonini aniqlovchi funksiya hosil qiling. A*x2 + B*x + C = 0
#     ko'rinishidagi tenglama kvadrat tenglama deyiladi. (A noldan farqli)

A = float(input('A = '))
B = float(input('B = '))
C = float(input('C = '))

def Funk(A,B,C):
    D = B**2 - (4*A*C)
    if D > 0:
        return 2
    elif D == 0:
        return 1
    else:
        return 0

print(Funk(A,B,C))



# 18) Doiraning yuzini hisoblovchi funksiya hosil qiling. Bu funksiya yordamida 3 ta doira yuzini
#     hisoblang. Doiraning yuzi S = п*R**2 orqali hisoblanadi. п = 3.1415 ni o'zgarmas deb qabul qiling.

R1 = int(input("R1 = "))
R2 = int(input("R2 = "))
R3 = int(input("R3 = "))

def Funk(R):
    п = 3.1415
    S = п*R**2
    return S

print("S1 =",Funk(R1))
print("S2 =",Funk(R2))
print("S3 =",Funk(R3))



# 19) Markazi bir nuqtada bo'lgan, R1 va R2 radiusga ega 2 ta aylananing ustma-ust tushmaydigan
#     (kesishmaydigan) qismining yuzini topuvchi RingS nomli funksiya hosil qiling. Doiraning yuzini 
#     yuzini hisoblash formulasidan foydalaning. S = п*R**2  п = 3.1415 ni o'zgarmas deb qabul qiling.

R1 = int(input("R1 = "))
R2 = int(input("R2 = "))

def Funk(R1,R2):
    п = 3.1415
    S = п*abs(R1**2 - R2**2)
    return S

print("S =",Funk(R1,R2))



# 20) To'g'ri burchakli uchburchakning katetlari A va B berilganda, uning perimetrini 
#     hisoblovchi TriangleP nomli funksiya hosil qiling.

A = int(input('A = '))
B = int(input('B = '))

def TriangleP(A,B):
    C = (A**2 + B**2)**0.5
    return A + B + C

print("P =",TriangleP(A,B))



# 21) A va B sonlari orasidagi sonlar yig'indisini hisoblovchi SumRange(A,B) nomli funksiya
#     hosil qiling. Agar A > B bo'lsa, funksiya 0 qiymat qaytaradi. Bu funksiya orqali A dan
#     B gacha B dan C gacha bo'lgan sonlar yig'indisini hisoblang. A, B, C butun sonlar.

A = int(input('A = '))
B = int(input('B = '))
C = int(input('C = '))

def SumRange(A,B):
    S = 0
    if A > B:
        return S
    else:
        for i in range(A,B+1):
            S += i
        return S

print(SumRange(A,B))
print(SumRange(B,C))



# 22) Arifmetik amallarni bajaruvchi Calc(A,B,Op) funksiyasini hosil qiling. A va B haqiqiy sonlar.
#     Op o'zgaruvchisi orqali bajariladigan arifmetik amal aniqlanadi.  1-ayirish, 2-ko'paytirish,
#     3-bo'lish, boshqalari qo'shish. Shu funksiya orqali A va B sonlari uchun N1,N2,N3,N4 amallari 
#     bajarilsin. (N1-N4 butun sonlar).

A = int(input('A = '))
B = int(input('B = '))
Op = int(input("Op = "))

def Calc(A,B,Op):
    if Op == 1:
        return A-B
    elif Op == 2:
        return A*B
    elif Op == 3:
        return A/B
    else:
        return A+B

print(Calc(A,B,Op))



# 23) X va Y butun sonlari berilgan (X va Y noldan farqli). (X,Y) nuqta qaysi chorakda ekanligini
#     aniqlovchi Quarter nomli funksiya hosil qiling. Bu funksiya orqali 4 ta nuqtaning choragini aniqlang.

def Quarter(x,y):
    if x>0 and y>0:
        return "1-chorak"
    elif x>0 and y<0:
        return "4-chorak"
    elif x<0 and y<0:
        return "3-chorak"
    else:
        return "2-chorak"
    
for i in range(1,5):
    print(Quarter(int(input("x = ")),int(input('y = '))))
    


# 24) Butun sonning juft-toqligini aniqlovchi Even(K) funksiyasini hosil qiling. Funksiya K juft
#     son bo'lsa - true, aks xolda false qiymat qaytarsin. Bu funksiya orqali 3 ta sonning 
#     juft yoki toqligi aniqlansin.

def Even(K):
    if K % 2 == 0:
        return "true"
    else:
        return "false"

for i in range(3):
    print(Even(int(input("K = "))))



# 25) IsSquare(K) mantiqiy funksiyani hosil qiling. (K>0) Agar K biror butun sonning kvadrati
#     bo'lsa, true aks xolda false qiymat qaytarsin. Shu funksiya orqali 3 ta sonni tekshiring.

def IsSquare(K):
    if K**0.5 == int(K**0.5):
        return "true"
    else:
        return "false"
    
for i in range(3):
    print(IsSquare(int(input("K = "))))



# 26) IsPower5(K) mantiqiy funksiyani hosil qiling. (K>0) Agar K soni 5 ning biror darajasi bo'lsa,
#     true aks holda false qiymat qaytarilsin. Shu funksiya orqali 5 ta sondan nechtasi 5 ning
#     darajasi ekanini aniqlovchi programma tuzilsin.


def IsPower5(K):
    i = 0
    while 5**i <= K:
        i += 1
        if 5**i > K:
            return "false"
        elif 5**i == K:
            return "true"
a = 0        
for j in range(5):
    d = IsPower5(int(input("K = ")))
    print(d)
    if d == "true":
        a += 1
print("5 ta sondan",a,"tasi 5 ning darajasi")



# 27) IsPowerN(K, N) mantiqiy funksiyasini hosil qiling. (K>0). Agar K soni N sonining biror darajasi
#     bo'lsa-true, aks holda false qiymat qaytarilsin. Shu funksiya orqali 5 ta sondan nechtasi N
#     ning darajasi ekanini aniqlovchi programma tuzilsin.
def IsPowerN(K,N):
    i = 0
    while N**i <= K:
        i += 1
        if N**i > K:
            return 'false'
        elif N**i == K:
            return 'true'
a = 0
N = int(input("N = "))
for j in range(5):
    d = IsPowerN(int(input("K = ")),N)
    print(d)
    if d == 'true':
        a += 1
print("5 ta sondan",a,"tasi",N,"ning darajasi")



# 28) IsPrime(N) mantiqiy funksiyasini hosil qiling. (N>0). Agar N soni tub bo'lsa - true
#     aks holda false qiymat qaytarilsin. Shu funksiya orqali kiritilgan k ta sondan nechtasi
#     tub ekanini aniqlovchi programma tuzilsin.

def IsPrime(N):
    k = 0
    for i in range(1,N+1):
        if N % i == 0:
            k += 1
    if k == 2:
        return "true"
    else:
        return "false"

a = 0
K = int(input('k = '))
for j in range(K):
    d = IsPrime(int(input('N = ')))
    print(d)
    if d == 'true':
        a += 1
print(a,"ta son tub")



# 29) Butun qiymat qaytaruvchi DigitCount(K) funksiyasini hosil qiling. (K>0). Funksiya K ning
#     raqamlari sonini qaytarsin. Shu funksiya orqali 5 ta sonning raqamlari soni aniqlansin.

def DigitCount(K):
    i = 0
    while K != 0:
        K //= 10
        i += 1
    return i

for j in range(1,6):
    print(DigitCount(int(input(str(j)+') '))),"xonali son")



# 30) Butun qiymat qaytaruvchi DigitN(K, N) funksiyasini hosil qiling. (K>0). Funksiya K sonining
#     N-raqamini qaytarsin. Agar K soni raqamlari N dan kichik bo'lsa, minus bir qaytarilsin.
#     Shu funksiya orqali K1, K2, K3 sonlarining N-raqami aniqlansin.

def DigitN(K,N):
    i = 0; a = K
    while K != 0:
        K //= 10
        i += 1
    s = i - N + 1
    
    if s > 0:
        while s != 0:
            son = a % 10
            a //= 10
            s -= 1
        return son
    else:
        return -1

N = int(input('N = '))
for j in range(1,4):
    print(DigitN(int(input("K"+str(j)+' = ')),N))
    


# 31) Palindrom(N) mantiqiy funksiyasini hosil qiling. (N>0). Agar N soni palindrom bo'lsa-true,
#     aks holda false qiymat qaytarilsin. Shu funksiya orqali 5 ta sondan nechtasi palindrom ekanini
#     aniqlovchi programma tuzilsin. 

def Palindrom(N):
    copy = N
    zid = 0
    while N != 0:
        zid = zid*10 + N%10
        N //= 10
    if copy == zid:
        return True
    else:
        return False

for i in range(1,6):
    print(Palindrom(int(input(str(i)+') '))))



# 32) Haqiqiy qiymat qaytaruvchi DegToRed(D) funksiyasini hosil qiling. (360>D>0). Funksiya D gradusning
#     Radian qiymatini qaytarsin. Shu funksiya orqali 3 ta berilgan burchakning radiandagi qiymati aniqlansin.

def DegToRed(D):
    a = D*3.14 / 180
    return a

for i in range(3):
    print(DegToRed(float(input('D = '))),"rad")



# 33) Haqiqiy qiymat qaytaruvchi RedToDeg(R) funksiyasini hosil qiling. Funksiya R radianning gradus qiymatini 
#     qaytarsin. Shu funksiya orqali radianda berilgan 3 ta burchakning gradusdagi qiymati aniqlansin.

def RedToDeg(R):
    a = 180*R / 3.14
    return a

for i in range(3):
    print(RedToDeg(float(input('R = '))),"gradus")



# 34) Butun qiymat qaytaruvchi Fact(N) funksiyasini hosil qiling. (N>0). Funksiya N! qiymatini
#     qaytarsin. Shu funksiya orqali 3 ta sonlarning faqtoriali aniqlansin.

def Fact(N):
    s = 1
    for i in range(1,N+1):
        s *= i
    return s

for i in range(3):
    print(Fact(int(input('N = '))))



# 35) Butun qiymat qaytaruvchi Fact2(N) funksiyasini hosil qiling. (N>0). Funksiya N!! ikkilangan
#     faktorial qiymatini qaytarsin. Shu funksiya orqali 3 ta sonlarining ikkilangan faktoriali
#     aniqlansin.

def Fact2(N):
    s = 1
    if N % 2 == 0:
        for i in range(2,N+1,2):
            s *= i
    else:
        for i in range(1,N+1,2):
            s *= i
    return s

for i in range(3):
    print(Fact2(int(input("N = "))))



# 36) Butun qiymat qaytaruvchi Fib(N) funksiyasini hosil qiling. (N>0). Funksiya Fibonachchi
#     sonlarining N-elementini qaytarsin.

def Fib(N):
    F1 = 1
    F2 = 1
    while N != 2:
        N -= 1
        Fn = F1 + F2
        F1 = F2
        F2 = Fn
    return Fn

print(Fib(int(input("N = "))))



# 37) Haqiqiy qiymat qaytaruvchi Power1(A,B) funksiyasini hosil qiling. Funksiya A**B darajasi qiymatini
#     qaytarsin. Shu funksiya orqali berilgan A1, A2, A3 sonlarining B darajasi topilsin. A, A1, A2, A3, B
#     haqiqiy sonlar.

def Power1(A,B):
    return A**B

B = int(input("B = "))
for i in range(1,4):
    print(Power1(int(input("A"+str(i)+" = ")),B))



# 38) Haqiqiy qiymat qaytaruvchi Power2(A,N) funksiyasini hosil qiling. Funksiyada A**N darajasi qiymati 
#     quydagi formula asosida topilsin. Shu funksiya orqali berilgan. A sonining N, M, K darajalari topilsin.
#     Agar N=0 bo'lsa, A**0 = 1; Agar N>0 bo'lsa, A**N = A*A*...*A (N ta ko'paytuvchi). Agar N<0 bolsa, 
#     A**N = 1 / (A*A*...*A) (|N| ta ko'paytuvchi). A haqiqiy, N, M, K butun sonlar.

def Power2(A,N):
    s = 1
    if N == 0:
        return s
    elif N > 0:
        for i in range(N):
            s *= A
        return s
    else:
        for i in range(abs(N)):
            s *= 1/A
        return s

A = float(input('A = '))
for i in range(3):
    if i == 0:
        print(Power2(A,int(input("N = "))))
    elif i == 1:
        print(Power2(A,int(input("M = "))))
    else:
        print(Power2(A,int(input("K = "))))


